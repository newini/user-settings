#!/bin/bash
#!/bin/zsh
# wsl
# ====================================
# Author: Eunchong Kim
# Date: 2022-01
# Project: user-settings
# Description: common setting for WSL
# ====================================


#WINDOWS_USERNAME=`powershell.exe '$env:UserName'` # This not work. It includes 'ctrl+m'
WINDOWS_USERNAME=`wslpath "$(wslvar USERNAME)"`


# ------------------------------------
#               Alias
# ------------------------------------
# Change Directory
alias onedrive="cd /mnt/c/Users/${WINDOWS_USERNAME}/OneDrive"
alias downloads="cd /mnt/c/Users/${WINDOWS_USERNAME}/Downloads"

# mkdir option
alias mkdir='mkdir -m 755'

# OPEN
alias open='xdg-open'

# Windows program
# Python on powershell
alias ppy='powershell.exe python'
alias ppyjl='powershell.exe python -m jupyterlab --no-browser'
# Edge browser
export PATH=$PATH:/mnt/c/Program\ Files\ \(x86\)/Microsoft/Edge/Application
alias edge='msedge.exe'

# Windows store apps
# Reference: https://www.tenforums.com/software-apps/57000-method-open-any-windows-10-apps-command-line.html


# ------------------------------------
#               Media
# ------------------------------------
# audio (may not work)
export PULSE_SERVER=tcp:localhost


# ------------------------------------
#       Windows terminal setting
# ------------------------------------
function wtsetting() {
    setting_path=/mnt/c/Users/${WINDOWS_USERNAME}/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json
    vim $setting_path
    vimdiff $setting_path $HOME/user-settings/windows-terminal/.
}


# ------------------------------------
#       Only for Metisp or UX310UQ
# ------------------------------------
if [ `hostname` = 'Metisp' -o `hostname` = 'UX310UQ' ]; then
    # ------------------------------------
    #           ssh alias
    source /mnt/c/Users/${WINDOWS_USERNAME}/OneDrive/workspace/.ssh/ssh.sh

    # ------------------------------------
    #           Syncthing
    # Check syncthing running. if not, start to run
    if [ -z "`pgrep syncthing`" ]; then # If syncthing is not running
        echo -e "[Warning] Syncthing is not running. Starting Syncthing ..."
        if [ -n "`syncthing -help 2>/dev/null`" ]; then # If synching -help is not empty
            syncthing -no-browser -logfile=".syncthing.log" -logflags="3" > /tmp/syncthing.out &
        fi
    fi
    # Check again
    if [ -z "`pgrep syncthing`" ]; then # If syncthing is not running
        echo -e "[Warning] Syncthing is still not running! Check yourself."
    else
        echo -e "[Info] Syncthing is running."
    fi
fi
